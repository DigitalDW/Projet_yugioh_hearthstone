<?xml version='1.0' encoding='utf-8'?>
<scheme description="" title="" version="2.0">
	<nodes>
		<node id="0" name="Python Script" position="(57.0, 45.0)" project_name="Orange3" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" title="Python Script" version="" />
	</nodes>
	<links />
	<annotations />
	<thumbnail />
	<node_properties>
		<properties format="literal" node_id="0">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00T\x00\x00\x00\x17\x00\x00\x05\x9f\x00\x00\x03A\x00\x00\x00T\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03A\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00T\x00\x00\x00-\x00\x00\x05\x9f\x00\x00\x03A', 'scriptLibrary': [{'name': 'analysis_script.py', 'script': 'import json\nfrom LTTL.Segmentation import Segmentation\nfrom LTTL.Input import Input\nfrom LTTL.Segment import Segment\nimport LTTL.Segmenter as Segmenter\n\nwith open("/Users/DigitalDW/Desktop/Projet_yugioh_hearthstone/data/preprocessed/hearthstone/hearthstone_preprocessed_basic.json") as f:\n    hearthstone_data = json.load(f)\n\nwith open("/Users/DigitalDW/Desktop/Projet_yugioh_hearthstone/data/preprocessed/yugioh/yugioh_preprocessed_basic.json") as f:\n    yugioh_data = json.load(f)\n\ndef main():\n    global out_object\n    \n    hs_inputs, hs_annotations = create_inputs("Hearthstone", hearthstone_data)\n    ygo_inputs, ygo_annotations = create_inputs("Yu-Gi-Oh", yugioh_data)\n\n    inputs = list()\n    annotations = list()\n\n    inputs.extend(hs_inputs)\n    inputs.extend(ygo_inputs)\n\n    annotations.extend(hs_annotations)\n    annotations.extend(ygo_annotations)\n\n    segmentation = Segmenter.concatenate(\n        inputs,\n        import_labels_as=None\n    )\n\n    for index, segment in enumerate(segmentation):\n        segment.annotations.update(annotations[index])\n        segmentation[index] = segment\n\n    out_object = segmentation\n\ndef create_inputs(game, data):\n    inputs = list()\n    inputs_annotations = list()\n\n    for year in data.keys():\n        for card in data[year]:\n            if len(card["rule"]) &gt; 0:\n                input_rule = Input(card["rule"])\n                inputs.append(input_rule)\n                inputs_annotations.append({\n                    "release_date": year,\n                    "game": game,\n                    "card_name": card["name"],\n                    "set": card["set"],\n                    "card_type": card["type"],\n                    "text_type": "rule",\n                })\n            if len(card["flavour"]) &gt; 0:\n                input_flavour = Input(card["flavour"])\n                inputs.append(input_flavour)\n                inputs_annotations.append({\n                    "release_date": year,\n                    "game": game,\n                    "card_name": card["name"],\n                    "set": card["set"],\n                    "card_type": card["type"],\n                    "text_type": "flavour",\n                })\n\n    return inputs, inputs_annotations\n\nif __name__ == "builtins":\n    main()\n', 'filename': '/Users/DigitalDW/Desktop/Projet_yugioh_hearthstone/orange_analysis/analysis_script.py'}], 'scriptText': 'import json\nfrom LTTL.Segmentation import Segmentation\nfrom LTTL.Input import Input\nfrom LTTL.Segment import Segment\nimport LTTL.Segmenter as Segmenter\n\nwith open("/Users/DigitalDW/Desktop/Projet_yugioh_hearthstone/data/preprocessed/hearthstone/hearthstone_preprocessed_basic.json") as f:\n    hearthstone_data = json.load(f)\n\nwith open("/Users/DigitalDW/Desktop/Projet_yugioh_hearthstone/data/preprocessed/yugioh/yugioh_preprocessed_basic.json") as f:\n    yugioh_data = json.load(f)\n\ndef main():\n    global out_object\n    \n    hs_inputs, hs_annotations = create_inputs("Hearthstone", hearthstone_data)\n    ygo_inputs, ygo_annotations = create_inputs("Yu-Gi-Oh", yugioh_data)\n\n    inputs = list()\n    annotations = list()\n\n    inputs.extend(hs_inputs)\n    inputs.extend(ygo_inputs)\n\n    annotations.extend(hs_annotations)\n    annotations.extend(ygo_annotations)\n\n    segmentation = Segmenter.concatenate(\n        inputs,\n        import_labels_as=None\n    )\n\n    for index, segment in enumerate(segmentation):\n        segment.annotations.update(annotations[index])\n        segmentation[index] = segment\n\n    out_object = segmentation\n\ndef create_inputs(game, data):\n    inputs = list()\n    inputs_annotations = list()\n\n    for year in data.keys():\n        for card in data[year]:\n            if len(card["rule"]) &gt; 0:\n                input_rule = Input(card["rule"])\n                inputs.append(input_rule)\n                inputs_annotations.append({\n                    "release_date": year,\n                    "game": game,\n                    "card_name": card["name"],\n                    "set": card["set"],\n                    "card_type": card["type"],\n                    "text_type": "rule",\n                })\n            if len(card["flavour"]) &gt; 0:\n                input_flavour = Input(card["flavour"])\n                inputs.append(input_flavour)\n                inputs_annotations.append({\n                    "release_date": year,\n                    "game": game,\n                    "card_name": card["name"],\n                    "set": card["set"],\n                    "card_type": card["type"],\n                    "text_type": "flavour",\n                })\n\n    return inputs, inputs_annotations\n\nif __name__ == "builtins":\n    main()\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01\xfc\x00\x00\x00\xcf\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
